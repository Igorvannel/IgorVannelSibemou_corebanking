version: '3.8'

services:
  # Application Spring Boot
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: corebanking-app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/core_banking
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - JAVA_OPTS=-Xms512m -Xmx1024m
    volumes:
      - app-logs:/app/logs
    networks:
      - corebanking-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Base de données PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: corebanking-postgres
    environment:
      - POSTGRES_DB=core_banking
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - corebanking-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d corebanking"]
      interval: 10s
      timeout: 5s
      retries: 5



  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus
    container_name: corebanking-prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - corebanking-network
    restart: always

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana
    container_name: corebanking-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - corebanking-network
    restart: always

  # Redis pour le cache
  redis:
    image: redis:alpine
    container_name: corebanking-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - corebanking-network
    restart: always

  # ElasticSearch pour la recherche et les logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: corebanking-elasticsearch
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - corebanking-network
    restart: always

  # Kibana pour visualiser les logs
  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    container_name: corebanking-kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - corebanking-network
    restart: always

  # Logstash pour collecter et traiter les logs
  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    container_name: corebanking-logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    networks:
      - corebanking-network
    restart: always

  # Filebeat pour transférer les logs
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.14.0
    container_name: corebanking-filebeat
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - app-logs:/app/logs:ro
    depends_on:
      - logstash
    networks:
      - corebanking-network
    restart: always

volumes:
  app-logs:
  postgres-data:
  prometheus-data:
  grafana-data:
  redis-data:
  elasticsearch-data:

networks:
  corebanking-network:
    driver: bridge